import{_ as t,c as e,a5 as i,o as r}from"./chunks/framework.COT_U_ro.js";const l="/assets/HTTP%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB.DuZwkrD-.png",s="/assets/HTTPS%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.BFDZHlTy.png",o="/assets/HTTP%E6%98%8E%E6%96%87%E9%80%9A%E4%BF%A1.CopQjbAa.png",h="/assets/HTTPS%E5%8A%A0%E5%AF%86%E9%80%9A%E4%BF%A1.BZ7ZYOFL.png",S=JSON.parse('{"title":"HTTPS握手过程","description":"","frontmatter":{"title":"HTTPS握手过程","abbrlink":3674911397,"date":"2021-05-18T20:07:59.000Z","tags":["计算机基础"]},"headers":[],"relativePath":"posts/HTTPS握手过程/index.md","filePath":"posts/HTTPS握手过程/index.md"}'),T={name:"posts/HTTPS握手过程/index.md"};function n(p,a,H,d,P,c){return r(),e("div",null,a[0]||(a[0]=[i('<h1 id="https学习小结" tabindex="-1">HTTPS学习小结 <a class="header-anchor" href="#https学习小结" aria-label="Permalink to &quot;HTTPS学习小结&quot;">​</a></h1><p>HTTPS是可以说是web应用的基础协议，今天尝试写一篇文章彻底搞懂这个协议。</p><h2 id="https是什么" tabindex="-1">HTTPS是什么 <a class="header-anchor" href="#https是什么" aria-label="Permalink to &quot;HTTPS是什么&quot;">​</a></h2><p>HTTPS就是安全的HTTP，简而言之HTTPS = HTTP + SSL，即在HTTP的基础上再套一层SSL。</p><h3 id="https的作用" tabindex="-1">HTTPS的作用 <a class="header-anchor" href="#https的作用" aria-label="Permalink to &quot;HTTPS的作用&quot;">​</a></h3><h4 id="_1-身份认证" tabindex="-1">1. 身份认证 <a class="header-anchor" href="#_1-身份认证" aria-label="Permalink to &quot;1. 身份认证&quot;">​</a></h4><p>身份认证就是我们能够确认我们当前访问的服务器就是我们要访问的服务器而不是黑客的服务器。</p><p><img src="'+l+'" alt=""></p><p>如上图所示，当使用HTTP协议时，用户以为自己是在和服务器通信，其实用户是在和黑客进行通信。</p><p><img src="'+s+'" alt=""></p><p>当使用HTTPS协议时，用户会先获取服务器的证书来验证当前通信的对象是否是服务器。</p><h4 id="_2-加密通信" tabindex="-1">2. 加密通信 <a class="header-anchor" href="#_2-加密通信" aria-label="Permalink to &quot;2. 加密通信&quot;">​</a></h4><p>HTTP协议的通行双方使用的是明文进行通行，如果遭到黑客的监听那么通信内容一览无余。</p><p><img src="'+o+'" alt=""></p><p>HTTPS的通信双方使用密文进行通信，即使遭到黑客监听黑客也无法获取通信的具体内容。</p><p><img src="'+h+'" alt=""></p><h2 id="https握手过程" tabindex="-1">HTTPS握手过程 <a class="header-anchor" href="#https握手过程" aria-label="Permalink to &quot;HTTPS握手过程&quot;">​</a></h2><p>在使用HTPPS通信过程中需通信双方先进行HTTPS握手，HTTPS握手的目的有两个身份认证以及秘钥协商。根据秘钥协商算法的不同握手的具体过程也不一样。其中RSA秘钥协商和DH秘钥协商是最常用的秘钥协商算法，因此本文主要详细叙述这两种秘钥协商算法的握手过程。</p><h3 id="_1-rsa秘钥协商算法握手过程" tabindex="-1">1. RSA秘钥协商算法握手过程 <a class="header-anchor" href="#_1-rsa秘钥协商算法握手过程" aria-label="Permalink to &quot;1. RSA秘钥协商算法握手过程&quot;">​</a></h3><ol><li>客户端首先发送一个随机数R1以及客户端所支持的加密套件到服务器。</li><li>服务器接到请求后生成一个随机数R2，然后根据客户端所发来的加密套件选择其中一个，最后将选择好的加密套件连同随机数R2一同发给客户端。</li><li>服务器紧接着将自己的证书也发送给客户端。</li><li>客户端收到随机数R2、加密套件以及服务证书后，首先是通过证书验证服务器的可靠性，证书验证通过后客户端生成随机数R3(Premaster secret)，随后从证书中取出公钥并用此公钥加密R3，然后使用R1、R2、R3计算出会话秘钥K并用此会话秘钥加密一段信息，最后客户端将加密后的R3以及经过会话秘钥加密后的信息一同发送给服务器。</li><li>服务器接收到客户端发送的信息后先用私钥解密出R3，然后通过R1、R2、R3计算出会话秘钥K，随后通过会话秘钥K解密客户端发送的加密信息，解密成功后服务器再用会话秘钥再加密一段信息并将这段信息发送给客户端。</li><li>客户端收到加密信息后使用会话秘钥解密，解密成功后表示通信双方秘钥协商成功，随后的通信内容都使用该会话秘钥进行加解密。</li></ol><h3 id="_2-dh密钥协商算法握手过程" tabindex="-1">2. DH密钥协商算法握手过程 <a class="header-anchor" href="#_2-dh密钥协商算法握手过程" aria-label="Permalink to &quot;2. DH密钥协商算法握手过程&quot;">​</a></h3><ol><li>客户端首先发送一个随机数R1以及客户端所支持的加密套件到服务器。</li><li>服务器接到请求后生成一个随机数R2，然后根据客户端所发来的加密套件选择其中一个，最后将选择好的加密套件连同随机数R2一同发给客户端。</li><li>服务器紧接着将自己的证书也发送给客户端。</li><li>服务器发送证书后先生成一个私钥（这个私钥不是服务器证书中公钥对应的私钥）和DH算法参数，然后使用私钥和DH算法参数生成一个公钥，最后使用证书私钥加密DH算法参数和DH算法公钥，并将加密后的DH算法参数和DH算法公钥发送给客户端。</li><li>客户端此时收到服务器发来的随机数R2、服务器证书以及加密后的DH算法参数和DH算法公钥。客户端验证证书成功后使用证书公钥解密DH算法参数和DH算法公钥。然后使用DH算法参数以及自己生成私钥计算出一个公钥。随后通过DH算法参数以及服务器端的DH算法公钥和自己生成的私钥计算出R3(Premaster secret)。然后使用R1、R2、R3计算出会话秘钥K，最后客户端将自己的DH算法公钥以及通过会话秘钥加密的信息发送给服务器。</li><li>服务器在得到客户端发来的DH算法公钥后，用自己DH算法私钥以及客户端DH算法公钥和DH算法参数算出R3，然后通过R1、R2、R3算出会话秘钥K，并用会话秘钥K解密客户端发来的加密信息。解密成功后再用会话秘钥K加密一段信息发送给客户端。</li><li>客户端解密成功后，握手阶段结束，双方使用会话秘钥加解密之后的通行内容。</li></ol><h3 id="_3-rsa秘钥协商算法和dh秘钥协商算法的区别" tabindex="-1">3. RSA秘钥协商算法和DH秘钥协商算法的区别 <a class="header-anchor" href="#_3-rsa秘钥协商算法和dh秘钥协商算法的区别" aria-label="Permalink to &quot;3. RSA秘钥协商算法和DH秘钥协商算法的区别&quot;">​</a></h3><p>通过握手过程我们可以看到最终的会话秘钥是由R1、R2、R3计算出的，而R1、R2是明文传输。所以会话秘钥安全性的关键在于R3不能被窃取。在RSA秘钥协商中我们使用公钥加密R3来保证R3不会被第三方获取，但是R3毕竟是通过不安全的信道发送出去了，即使经过加密也难免让人怀疑其安全性。但是DH秘钥协商算法不同，从上面的过程中我们可以发现在DH秘钥协商算法下R3是不会通过信道发送出去的，它是由通信双方分别计算得到了，因此看起来更安全一些。</p><h3 id="_4-加密套件的作用" tabindex="-1">4. 加密套件的作用 <a class="header-anchor" href="#_4-加密套件的作用" aria-label="Permalink to &quot;4. 加密套件的作用&quot;">​</a></h3><p>在上述握手过程中我多次提到加密套件，但是似乎都没有看到有使用的地方，只是在传来传去。其实不然，密码套件中记录了通信双方要使用何种秘钥协商算法以及最终通行过程中要使用哪种对称加密算法等等信息。只有通过加密套件计算机才能知道如何进行秘钥交换和通信的加解密操作。</p>',26)]))}const D=t(T,[["render",n]]);export{S as __pageData,D as default};
