import{_ as i,c as a,a5 as n,o as l}from"./chunks/framework.COT_U_ro.js";const o=JSON.parse('{"title":"如何搭建自己的博客","description":"","frontmatter":{"title":"如何搭建自己的博客","abbrlink":2770212674,"date":"2022-06-19T22:38:17.000Z","tags":["hexo","github actions","阿里对象存储"]},"headers":[],"relativePath":"drafts/2022-06-19-如何搭建自己的博客.md","filePath":"drafts/2022-06-19-如何搭建自己的博客.md"}'),h={name:"drafts/2022-06-19-如何搭建自己的博客.md"};function t(p,s,e,k,E,r){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="如何搭建自己的博客" tabindex="-1">如何搭建自己的博客 <a class="header-anchor" href="#如何搭建自己的博客" aria-label="Permalink to &quot;如何搭建自己的博客&quot;">​</a></h1><p>去年的时候心血来潮使用hexo+阿里oss+gitlab的方式搭建了自己的博客系统。这套系统成功的在阿里云上运行了一年，不幸的是阿里云主机今年已经到期所以不得不将gitlab ci/cd（gitlab以docker的方式运行在阿里云上）替换成github actions。由于这套系统已经运行了一年有余很多重要的操作和概念早已忘记的一干二净，所以在替换过程中不得不重新翻看资料进行学习，以前遇到的坑也还要重新再踩一遍。重新查找资料和踩坑的过程自不必说十分浪费时间，所以在本次替换结束后我写下该篇文章用以记录和总结这次替换的过程，方便以后查看。</p><h2 id="技术栈介绍" tabindex="-1">技术栈介绍 <a class="header-anchor" href="#技术栈介绍" aria-label="Permalink to &quot;技术栈介绍&quot;">​</a></h2><p>博客还是采用hexo进行构建，当时之所以选择hexo主要是因为hexo是采用node.js进行编写的，对于前端开发人员来说十分熟悉，所以顺理成章的就使用了hexo。博客的打包和部署从gitlab ci/cd替换成了github actions，之所以进行替换主要还是因为github actions是免费的，而之前的gitlab ci/cd是在阿里云主机上运行的费用还是有点小贵。最终打包后的文件被存储在了阿里oss上，然后通过<a href="https://blog.glimmertreasure.com/" target="_blank" rel="noreferrer">https://blog.glimmertreasure.com/</a> 这个网址进行访问。总的来说技术栈就是hexo+github actions+阿里oss。</p><h2 id="如何使用github-actions将自己的博客打包发布到阿里oss" tabindex="-1">如何使用github actions将自己的博客打包发布到阿里oss <a class="header-anchor" href="#如何使用github-actions将自己的博客打包发布到阿里oss" aria-label="Permalink to &quot;如何使用github actions将自己的博客打包发布到阿里oss&quot;">​</a></h2><p>刚开始使用hexo时我们通常都是选择在本地写完博客后使用npm run build命令在本机将我们写的博客打包成静态资源文件，然后将这些静态资源手动拷贝阿里oss上，这样便完成了一次博客的发布工作。虽然用起来问题不大但显得有点落后，毕竟让服务器自动打包发布比自己手动执行命令看起来要高大上的多。使用电脑自动打包和发布项目其实就是ci/cd（持续集成/持续部署）思想的一种体现。话说回来，本博客系统选择使用github actions作为ci/cd的工具。github actons使用起来非常简单，我们只需要将我们的ci/cd配置文件及.yml文件放到.github/workflows目录下，github就能读取我们的配置文件进行一系列的操作自动部署我们的博客了。以下就是这个博客的github actions配置文件。后面我会逐行解释。</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">blog-depoly</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">production</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;master&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/setup-node@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          node-version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lts/gallium</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">hexo build</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          npm install</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          npm run clean</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          npm run build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">set ossutil</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">manyuanrong/setup-ossutil@v2.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          endpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;oss-cn-hangzhou.aliyuncs.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          access-key-id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.ALI_OSS_ASSCESS_ID }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          access-key-secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.ALI_OSS_ASSCESS_SECRET }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">copy to ali-oss</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ossutil cp public oss://blog-example-com -rf</span></span></code></pre></div><h3 id="name字段" tabindex="-1">name字段 <a class="header-anchor" href="#name字段" aria-label="Permalink to &quot;name字段&quot;">​</a></h3><p>首先是name字段如下所示：</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">blog-depoly</span></span></code></pre></div><p>name字段不是特别重要，它表示了这个workflow的名称。在.github/workflows目录下的每个.yml文件都是一个workflow，因此可以通过name字段来区分不同的workflow。同时在github对应的项目的actions面板中可以看到该名称的workflow。如下图所示： <img src="https://picture-glimmertreasure-com.oss-cn-hangzhou.aliyuncs.com/20220623225856.png" alt="name字段在github中的显示"></p><h3 id="on字段" tabindex="-1">on字段 <a class="header-anchor" href="#on字段" aria-label="Permalink to &quot;on字段&quot;">​</a></h3><p>on字段如下所示：</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">master</span></span></code></pre></div><p>on字段用于设置该workflow的执行时机，如上面的yml配置所示，push表示我们需要在向github中推送代码后执行该workflow，而在branches中我们可以更精确的指明我们是需要在向哪几个分支推送的时候触发此workflow。</p><h3 id="jobs字段" tabindex="-1">jobs字段 <a class="header-anchor" href="#jobs字段" aria-label="Permalink to &quot;jobs字段&quot;">​</a></h3><p>在github actions的概念中一个workflow可以有一个和多个job，多个job之间默认是相互独立了，也就是说多个job之间默认是并行执行的。如果你想要多个job按照一定顺序执行的话就要设定他们之间的依赖关系，如下所示</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  job1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  job2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    needs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">job1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  job3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    needs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">job1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">job2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>job2需要等job1执行成功后才能执行，job3需要等job1和job2都执行成功后才能执行，也就是说执行顺序是这样的：job1 -&gt; job2 -&gt; job3。</p><h4 id="job的id" tabindex="-1">job的id <a class="header-anchor" href="#job的id" aria-label="Permalink to &quot;job的id&quot;">​</a></h4><p>每个job都需要一个唯一的id用于标识自己，如：</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">构建博客</span></span></code></pre></div><p>build就是该job的唯一id，我们还可设置name属性用于在github页面上进行显示。</p><h4 id="runs-on" tabindex="-1">runs-on <a class="header-anchor" href="#runs-on" aria-label="Permalink to &quot;runs-on&quot;">​</a></h4><p>runs-on选项用于设置我们job在什么环境下运行，在build job中runs-on为ubuntu-latest，表示该job运行在最新的ubuntu系统中。</p><h4 id="environment" tabindex="-1">environment <a class="header-anchor" href="#environment" aria-label="Permalink to &quot;environment&quot;">​</a></h4><p>environment表示我们所运行的环境，这里我们填写production表示生产环境。</p><h4 id="steps" tabindex="-1">steps <a class="header-anchor" href="#steps" aria-label="Permalink to &quot;steps&quot;">​</a></h4><p>steps是job运行的关键配置，steps表示一系列顺序执行的任务，在steps中我们可以运行actions或者命令。</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;master&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/setup-node@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          node-version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lts/gallium</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">hexo build</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          npm install</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          npm run clean</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          npm run build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">set ossutil</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">manyuanrong/setup-ossutil@v2.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          endpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;oss-cn-hangzhou.aliyuncs.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          access-key-id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.ALI_OSS_ASSCESS_ID }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          access-key-secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.ALI_OSS_ASSCESS_SECRET }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">copy to ali-oss</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ossutil cp public oss://blog-example-com -rf</span></span></code></pre></div><p>在这个steps中，我们首先使用actions/checkout@v3这个action将项目分支切换到master。 然后使用actions/setup-node@v3这个action安装指定版本的node(lts/gallium)。 接下来使用run指定在操作系统的shell中运行的命令，在这个shell中我们先执行了npm intall 安装依赖，然后使用npm run clean清楚npm的缓存，最后使用npm run build执行构建。 再接着使用manyuanrong/setup-ossutil@v2.0这个action下载和配置ali对象存储。 最后将我们构建后的文件复制到ali对象存储中。</p><h2 id="未完成待续" tabindex="-1">未完成待续...... <a class="header-anchor" href="#未完成待续" aria-label="Permalink to &quot;未完成待续......&quot;">​</a></h2>`,32)]))}const g=i(h,[["render",t]]);export{o as __pageData,g as default};
