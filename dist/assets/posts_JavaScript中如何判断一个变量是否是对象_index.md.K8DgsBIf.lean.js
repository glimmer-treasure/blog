import{_ as i,c as a,a5 as t,o as p}from"./chunks/framework.COT_U_ro.js";const h="/assets/JavaScript%E7%9A%84%E7%B1%BB%E5%9E%8B.g2WLfeXB.png",n="/assets/typeof%E8%BF%94%E5%9B%9E%E7%9A%84%E7%BB%93%E6%9E%9C.BsWCGOl0.png",e="/assets/typeof%E4%B8%8EJavaScript%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB.Cm8MaEMr.png",E=JSON.parse('{"title":"JavaScript中如何判断一个变量是否是对象","description":"","frontmatter":{"title":"JavaScript中如何判断一个变量是否是对象","abbrlink":1819219542,"date":"2020-07-26T22:17:58.000Z","tags":["前端"]},"headers":[],"relativePath":"posts/JavaScript中如何判断一个变量是否是对象/index.md","filePath":"posts/JavaScript中如何判断一个变量是否是对象/index.md"}'),l={name:"posts/JavaScript中如何判断一个变量是否是对象/index.md"};function k(r,s,o,d,y,g){return p(),a("div",null,s[0]||(s[0]=[t('<h1 id="javascript中如何判断一个变量是否是对象、数组" tabindex="-1">JavaScript中如何判断一个变量是否是对象、数组 <a class="header-anchor" href="#javascript中如何判断一个变量是否是对象、数组" aria-label="Permalink to &quot;JavaScript中如何判断一个变量是否是对象、数组&quot;">​</a></h1><p>在工作中难免会遇到判断一个变量是否是对象、数组的问题，今天我来总结一下</p><h2 id="_1-基础知识" tabindex="-1">1. 基础知识 <a class="header-anchor" href="#_1-基础知识" aria-label="Permalink to &quot;1. 基础知识&quot;">​</a></h2><h3 id="_1-1-javascript的变量类型" tabindex="-1">1.1 JavaScript的变量类型 <a class="header-anchor" href="#_1-1-javascript的变量类型" aria-label="Permalink to &quot;1.1  JavaScript的变量类型&quot;">​</a></h3><p><img src="'+h+'" alt="JavaScript的类型"></p><p>如上图所示，到目前为止JavaScript总共有8中类型，这8中类型分为基本类型和引用类型两大部分。</p><h3 id="_1-2-使用typeof运算符" tabindex="-1">1.2 使用typeof运算符 <a class="header-anchor" href="#_1-2-使用typeof运算符" aria-label="Permalink to &quot;1.2 使用typeof运算符&quot;">​</a></h3><p>typeof 操作符返回一个字符串，表示未经计算的操作数的类型。</p><p>typeof返回的所有结果入下图所示</p><p><img src="'+n+'" alt="typeof返回的结果"></p><h3 id="_1-3-javascript类型和typeof的对应关系" tabindex="-1">1.3 JavaScript类型和typeof的对应关系 <a class="header-anchor" href="#_1-3-javascript类型和typeof的对应关系" aria-label="Permalink to &quot;1.3 JavaScript类型和typeof的对应关系&quot;">​</a></h3><p>JavaScript类型和typeof的对应关系如下图所示，typeof的返回值和JavaScript类型并不是一一对应的关系。</p><p><img src="'+e+`" alt="JavaScript类型和typeof的对应关系"></p><h2 id="_2-如何判断一个变量是否为对象" tabindex="-1">2. 如何判断一个变量是否为对象 <a class="header-anchor" href="#_2-如何判断一个变量是否为对象" aria-label="Permalink to &quot;2. 如何判断一个变量是否为对象&quot;">​</a></h2><h3 id="_2-1-使用typeof进行判断" tabindex="-1">2.1 使用typeof进行判断 <a class="header-anchor" href="#_2-1-使用typeof进行判断" aria-label="Permalink to &quot;2.1 使用typeof进行判断&quot;">​</a></h3><p>通过之前的讲解，我们知道typeof 返回&#39;object&#39;时该变量可能是Object也可能Null。因此我们可以先判断变量是否为null，如果不是再用typeof 进行判断。代码如下所示：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span></span></code></pre></div><h3 id="_2-2-使用object-prototype-tostring进行判断" tabindex="-1">2.2 使用Object.prototype.toString进行判断 <a class="header-anchor" href="#_2-2-使用object-prototype-tostring进行判断" aria-label="Permalink to &quot;2.2 使用Object.prototype.toString进行判断&quot;">​</a></h3><p>我们之前已经讲解了如何使用typeof进行判断变量是否为对象，但是使用typeof有一个问题如下所示:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {a: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// object</span></span></code></pre></div><p>如果我们使用isObject函数对变量进行判断时不仅<code>{a: &#39;a&#39;, b: &#39;b&#39;}</code>这样的对象能通过判断，而且像数组、Promise、Date这样的内置的构造函数所返回的对象也能通过判断。但是在有些情况下我们只是想判断一个变量是否是<code>{a: &#39;a&#39;, b: &#39;b&#39;}</code>这样的纯对象，而不是由各种JavaScript内置构造函数生成的对象时使用typeof方法就会显得捉襟见肘。</p><p>对于判断一个变量是不是一个纯对象，我们可以使用Object.prototype.toString方法进行判断，代码如下所示：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isPlainObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[object Object]&#39;</span></span></code></pre></div><p>之所以使用Object.prototype.toString，而不是obj.toString是因为有些对象的原型可能重写了toString方法，所以我们要显示的去调用Object.prototype.toString方法。</p><h2 id="_3-如何判断一个对象是否为空对象" tabindex="-1">3. 如何判断一个对象是否为空对象 <a class="header-anchor" href="#_3-如何判断一个对象是否为空对象" aria-label="Permalink to &quot;3. 如何判断一个对象是否为空对象&quot;">​</a></h2><p>在我们的JavaScript项目中我们还经常需要判断一个变量是否为空对象，那么如何来实现对空对象的判断呢？</p><h3 id="_3-1-使用for-in-循环来判断" tabindex="-1">3.1 使用for in 循环来判断 <a class="header-anchor" href="#_3-1-使用for-in-循环来判断" aria-label="Permalink to &quot;3.1 使用for in 循环来判断&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isEmptyObj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>for in 循环会遍历当前对象和对象原型上的可枚举属性，因此我们可以使用for in来遍历一个对象。(由于{}.__proto__上的属性全部为不可枚举所以for in 不会遍历到任何属性)。</p><p>缺点：但是这个方法并非完美，由于是只能遍历可枚举属性，所以如果一个对象上只有不可枚举属性的话，该方法会判断错误。</p><h3 id="_3-2-使用object-keys方法判断" tabindex="-1">3.2 使用Object.keys方法判断 <a class="header-anchor" href="#_3-2-使用object-keys方法判断" aria-label="Permalink to &quot;3.2 使用Object.keys方法判断&quot;">​</a></h3><p>这种方法的核心是空对象自身是没有属性的，因此我们可以获取一个对象自身的属性，如果结果为空那么就是一个空对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isEmptyObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><p>Object.keys能返回对象自身上所有可枚举属性的名称所构成的数组，因此如果数组长度为0，那么就是一个空对象。</p><p>缺点：如同使用for in循环进行判断一样，Object.keys方法也只返回可枚举属性，所以并不是很完美。</p><h3 id="_3-3-使用object-getownpropertynames方法判断" tabindex="-1">3.3 使用Object.getOwnPropertyNames方法判断 <a class="header-anchor" href="#_3-3-使用object-getownpropertynames方法判断" aria-label="Permalink to &quot;3.3 使用Object.getOwnPropertyNames方法判断&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isEmptyObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOwnPropertyNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><p>该方法是Object.keys方法的改进，一样也是返回对象自身的属性名所构成的数组。但是与Object.keys方法不同的一点是该方法可以获取到不可枚举属性。</p><p>缺点：该方法无法获取到用Symbol表示的属性。（可以使用Object.getOwnPropertySymbols(obj)作为补充）代码如下：</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isEmptyObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOwnPropertyNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOwnPropertySymbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><h3 id="_3-4-使用reflect-ownkeys方法判断" tabindex="-1">3.4 使用Reflect.ownKeys方法判断 <a class="header-anchor" href="#_3-4-使用reflect-ownkeys方法判断" aria-label="Permalink to &quot;3.4 使用Reflect.ownKeys方法判断&quot;">​</a></h3><p>使用Reflect.ownKeys也可以返回对象自身属性名所构成的数组，该方法不仅返回正常的属性名，也返回不可枚举属性以及Symbol属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isEmptyObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ownKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><h2 id="_4-如何判断一个变量是否是数组" tabindex="-1">4. 如何判断一个变量是否是数组 <a class="header-anchor" href="#_4-如何判断一个变量是否是数组" aria-label="Permalink to &quot;4. 如何判断一个变量是否是数组&quot;">​</a></h2><p>判断一个变量是否数组有两种比较完美的方法，一种是使用Array.isArray方法，另一种是使用Object.prototype.toString方法。</p><h3 id="_4-1-使用array-isarray方法" tabindex="-1">4.1 使用Array.isArray方法 <a class="header-anchor" href="#_4-1-使用array-isarray方法" aria-label="Permalink to &quot;4.1 使用Array.isArray方法&quot;">​</a></h3><p>Array.isArray方法是ES6新增的专门判断一个对象是不是数组的方法。代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)</span></span></code></pre></div><h3 id="_4-2-使用object-prototype-tostring方法" tabindex="-1">4.2 使用Object.prototype.toString方法 <a class="header-anchor" href="#_4-2-使用object-prototype-tostring方法" aria-label="Permalink to &quot;4.2 使用Object.prototype.toString方法&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[object Array]&#39;</span></span></code></pre></div><h3 id="_4-3-完美解决方案" tabindex="-1">4.3 完美解决方案 <a class="header-anchor" href="#_4-3-完美解决方案" aria-label="Permalink to &quot;4.3 完美解决方案&quot;">​</a></h3><p>虽然判断是否为数组类型使用Array.isArray与Object.prototype.toString都可以但是Array.isArray是ES6的语法我们可以将这两个方法封装起来，形成一个完美的解决方案：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Array.isArray) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[object Array]&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,53)]))}const F=i(l,[["render",k]]);export{E as __pageData,F as default};
